const ChatbotMessage = require("../models/chatbotMessage");
const Product = require("../models/Product");
const Category = require("../models/Category");
const User = require("../models/User");
const { STATUS_CODE } = require("../Helper/enums");
const { openai } = require("../config/openai");
// const mongoose = require("mongoose");

const getChatHistory = async (userId) => {
  try {
    // if (!mongoose.Types.ObjectId.isValid(userId)) {
    //   return {
    //     code: 400,
    //     success: false,
    //     message: "Invalid userId!",
    //   };
    // }
    let chat = await ChatbotMessage.findOne({
      userId: userId,
    });
    const user = await User.findById(userId);

    if (!chat) {
      chat = new ChatbotMessage({
        userId,
        messages: [
          {
            role: "system",
            content: `Xin ch√†o ${user.fullName}!! M√¨nh l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng b√°n h√†ng c√¥ng ngh·ªá. B·∫°n ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m c√¥ng ngh·ªá n√†o ·∫°? M√¨nh c√≥ th·ªÉ t∆∞ v·∫•n gi√∫p b·∫°n ch·ªçn l·ª±a ph√π h·ª£p nh·∫•t! Ho·∫∑c n·∫øu mu·ªën th√¨ b·∫°n c√≥ th·ªÉ t√°n g·∫´u v·ªõi m√¨nh... üòä`,
          },
        ],
      });
      await chat.save();
    }
    return { code: STATUS_CODE.SUCCESS, success: true, data: chat.messages };
  } catch (error) {
    return { code: STATUS_CODE.ERROR, success: false, message: error.message };
  }
};

const sendMessage = async (userId, userMessage) => {
  try {
    // T√¨m ho·∫∑c t·∫°o ƒëo·∫°n chat
    let chat = await ChatbotMessage.findOne({ userId });
    if (!chat) {
      chat = new ChatbotMessage({ userId, messages: [] });
    }

    // L∆∞u tin nh·∫Øn m·ªõi c·ªßa user
    chat.messages.push({ role: "user", content: userMessage });

    // L·∫•y c√°c tin nh·∫Øn g·∫ßn nh·∫•t
    let messages = chat.messages.map(({ role, content }) => ({
      role,
      content,
    }));
    // if (chat.messages.length > 0) {
    //   messages.unshift({
    //     role: chat.messages[0].role,
    //     content: chat.messages[0].content,
    //   });
    // }

    // ==== X√ÅC ƒê·ªäNH INTENT D·ª∞A TR√äN userMessage ====
    const intentResponse = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `
            B·∫°n l√† m·ªôt AI chuy√™n ph√¢n t√≠ch m·ª•c ƒë√≠ch c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
            Ph√¢n lo·∫°i c√¢u h·ªèi theo 3 nh√≥m:
            - 'in_store' n·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·∫£n ph·∫©m hi·ªán c√≥, mu·ªën mua, h·ªèi gi√°, t·ªìn kho... li√™n quan ƒë·∫øn c·ª≠a h√†ng ƒëang b√°n.
            - 'out_of_scope' n·∫øu c√¢u h·ªèi ch·ªâ mang t√≠nh th√¥ng tin chung (v√≠ d·ª•: ƒëi·ªán tho·∫°i n√†o t·ªët, xu h∆∞·ªõng c√¥ng ngh·ªá...)
            - 'general' n·∫øu l√† c√¢u ch√†o h·ªèi, tr√≤ chuy·ªán kh√¥ng li√™n quan ƒë·∫øn s·∫£n ph·∫©m.
            Ch·ªâ tr·∫£ v·ªÅ m·ªôt t·ª´: in_store, out_of_scope, ho·∫∑c general.
          `,
        },
        { role: "user", content: userMessage },
      ],
      temperature: 0,
    });

    const intent =
      intentResponse?.choices?.[0]?.message?.content?.trim().toLowerCase() ||
      "general";

    // ==== T·∫†O PROMPT T√ôY THEO INTENT ====
    if (intent === "in_store") {
      const products = await Product.find({ stock: { $gt: 0 } })
        .populate("categoryId", "name")
        .lean();
      const categories = await Category.find().lean();

      const categoryList = categories.map((c) => `- ${c.name}`).join("<br>");
      const productList = products
        .map(
          (p) =>
            `<div class="product-item"><a href="/product-left-sidebar/${
              p._id
            }" target="_blank">üõí <strong>${p.name}</strong></a> (Danh m·ª•c: ${
              p.categoryId?.name || "Ch∆∞a c√≥"
            }): ${p.description} <b>(Gi√°: ${p.price} VND, C√≤n: ${
              p.stock
            })</b></div>`
        )
        .join("<br>");

      messages.unshift({
        role: "system",
        content: `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI t∆∞ v·∫•n s·∫£n ph·∫©m.
        - ƒêo·∫°n vƒÉn b·∫£n tr·∫£ v·ªÅ ph·∫£i ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng b·∫±ng HTML.
        - Kh√¥ng d√πng th∆∞ vi·ªán, ch·ªâ d√πng CSS thu·∫ßn.
        - Gi·ªØ nguy√™n c√°c th·∫ª HTML nh∆∞ <div>, <a>, <strong>, class="product-item",...
        - Kh√¥ng ƒë∆∞·ª£c d√πng markdown nh∆∞ [link](url).
        - Ch·ªâ tr·∫£ v·ªÅ c√°c s·∫£n ph·∫©m c√≥ li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
        - Ph·∫£i th√™m ƒëo·∫°n gi·ªõi thi·ªáu v√† k·∫øt th√∫c trong m·ªói l·∫ßn tr·∫£ l·ªùi v√† m·ªói l·∫ßn l√† l·ªùi tho·∫°i kh√°c nhau.
        - N·∫øu trong danh s√°ch kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu th√¨ b√°o l·∫°i cho kh√°ch theo c√°ch l·ªãch s·ª± nh·∫•t.
        - Kh√¥ng t·ª± ƒë·ªông ƒë·ªÅ xu·∫•t c√°c s·∫£n ph·∫©m kh√¥ng c√≥ trong danh s√°ch.
        - M·ªçi th√¥ng tin s·∫£n ph·∫©m b·∫°n cung c·∫•p **ch·ªâ ƒë∆∞·ª£c l·∫•y t·ª´ danh s√°ch ƒë∆∞·ª£c cung c·∫•p**.
        - Tuy·ªát ƒë·ªëi **kh√¥ng t·ª± nghƒ© ra, ƒë·ªÅ xu·∫•t hay th√™m c√°c s·∫£n ph·∫©m kh√°c ngo√†i danh s√°ch**.
        - N·∫øu **kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p**, h√£y tr·∫£ l·ªùi l·ªãch s·ª± r·∫±ng hi·ªán t·∫°i c·ª≠a h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m theo y√™u c·∫ßu v√† g·ª£i √Ω ng∆∞·ªùi d√πng th·ª≠ y√™u c·∫ßu kh√°c.
        - C√¢u tr·∫£ l·ªùi ph·∫£i ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng HTML (v√≠ d·ª•: <div>, <a>, <strong>, class="product-item"...).
        - Kh√¥ng s·ª≠ d·ª•ng markdown (vd: [link](url)).
        - M·ªói l·∫ßn tr·∫£ l·ªùi ph·∫£i c√≥ ƒëo·∫°n **m·ªü ƒë·∫ßu v√† k·∫øt th√∫c th√¢n thi·ªán, linh ho·∫°t m·ªói l·∫ßn**, kh√¥ng l·∫∑p l·∫°i ho√†n to√†n.`,
      });

      messages.push({
        role: "user",
        content: `Danh m·ª•c hi·ªán c√≥:<br>${categoryList}<br><br>S·∫£n ph·∫©m li√™n quan:<br><div class="product-list">${productList}</div><br><br>Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}"`,
      });
    } else if (intent === "out_of_scope") {
      messages.unshift({
        role: "system",
        content: `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI cho c·ª≠a h√†ng. C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng kh√¥ng li√™n quan ƒë·∫øn s·∫£n ph·∫©m c√≥ trong c·ª≠a h√†ng, n√™n h√£y ph·∫£n h·ªìi l·ªãch s·ª± r·∫±ng b·∫°n ch·ªâ h·ªó tr·ª£ t∆∞ v·∫•n c√°c s·∫£n ph·∫©m ƒëang c√≥ trong kho.`,
      });

      messages.push({ role: "user", content: userMessage });
    } else {
      messages.unshift({
        role: "system",
        content: `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªó tr·ª£ tr√≤ chuy·ªán. N·∫øu c√≥ hi·ªÉn th·ªã HTML (v√≠ d·ª• link s·∫£n ph·∫©m), lu√¥n gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng HTML.`,
      });

      messages.push({ role: "user", content: userMessage });
    }

    // ==== G·ªåI OPENAI ƒê·ªÇ TR·∫¢ L·ªúI CU·ªêI C√ôNG ====
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages,
      temperature: 0.8,
    });

    const botResponse =
      response?.choices?.[0]?.message?.content?.trim() ||
      "T√¥i ƒëang x·ª≠ l√Ω th√¥ng tin, b·∫°n vui l√≤ng h·ªèi l·∫°i theo c√°ch kh√°c nh√©.";

    // ==== L∆ØU PH·∫¢N H·ªíI V√Ä TR·∫¢ V·ªÄ ====
    chat.messages.push({ role: "system", content: botResponse });
    await chat.save();

    return {
      code: STATUS_CODE.SUCCESS,
      success: true,
      data: botResponse,
    };
  } catch (error) {
    console.error("sendMessage error:", error);
    return {
      code: STATUS_CODE.ERROR,
      success: false,
      message: error.message,
    };
  }
};

const deleteChatHistory = async (userId) => {
  try {
    const result = await ChatbotMessage.findOneAndDelete({
      userId: userId,
    });

    if (!result) {
      return {
        code: STATUS_CODE.BAD_REQUEST,
        success: false,
        message: "Chat history not found!",
      };
    }

    return {
      code: STATUS_CODE.SUCCESS,
      success: true,
      message: "Chat history has been cleared!",
    };
  } catch (error) {
    return { code: STATUS_CODE.ERROR, success: false, message: error.message };
  }
};

module.exports = {
  getChatHistory,
  sendMessage,
  deleteChatHistory,
};
